diff --git a/Mac/BuildScript/build-installer.py b/Mac/BuildScript/build-installer.py
index 4fab488..1c9621b 100755
--- a/Mac/BuildScript/build-installer.py
+++ b/Mac/BuildScript/build-installer.py
@@ -209,9 +209,9 @@ def library_recipes():

     result.extend([
           dict(
-              name="OpenSSL 1.1.1g",
-              url="https://www.openssl.org/source/openssl-1.1.1g.tar.gz",
-              checksum='76766e98997660138cdaf13a187bd234',
+              name="OpenSSL 1.1.1m",
+              url="https://www.openssl.org/source/openssl-1.1.1m.tar.gz",
+              checksum='8ec70f665c145c3103f6e330f538a9db',
               buildrecipe=build_universal_openssl,
               configure=None,
               install=None,
@@ -221,9 +221,9 @@ def library_recipes():
     if internalTk():
         result.extend([
           dict(
-              name="Tcl 8.6.8",
-              url="ftp://ftp.tcl.tk/pub/tcl//tcl8_6/tcl8.6.8-src.tar.gz",
-              checksum='81656d3367af032e0ae6157eff134f89',
+              name="Tcl 8.6.11",
+              url="https://prdownloads.sourceforge.net/tcl/tcl8.6.12-src.tar.gz",
+              checksum='87ea890821d2221f2ab5157bc5eb885f',
               buildDir="unix",
               configure_pre=[
                     '--enable-shared',
@@ -237,12 +237,9 @@ def library_recipes():
                   },
               ),
           dict(
-              name="Tk 8.6.8",
-              url="ftp://ftp.tcl.tk/pub/tcl//tcl8_6/tk8.6.8-src.tar.gz",
-              checksum='5e0faecba458ee1386078fb228d008ba',
-              patches=[
-                  "tk868_on_10_8_10_9.patch",
-                   ],
+              name="Tk 8.6.11",
+              url="https://prdownloads.sourceforge.net/tcl/tk8.6.12-src.tar.gz",
+              checksum='1d6dcf6120356e3d211e056dff5e462a',
               buildDir="unix",
               configure_pre=[
                     '--enable-aqua',
@@ -267,6 +264,7 @@ def library_recipes():
               checksum='ef68674fb47a8b8e741b34e429d86e9d',
               configure_pre=[
                     '--disable-dependency-tracking',
+                    '--disable-nls'
               ]
               ),
         ])
@@ -307,9 +305,9 @@ def library_recipes():
                   ),
           ),
           dict(
-              name="SQLite 3.32.2",
-              url="https://sqlite.org/2020/sqlite-autoconf-3320200.tar.gz",
-              checksum='eb498918a33159cdf8104997aad29e83',
+              name="SQLite 3.37.2",
+              url="https://sqlite.org/2022/sqlite-autoconf-3370200.tar.gz",
+              checksum='683cc5312ee74e71079c14d24b7a6d27',
               extra_cflags=('-Os '
                             '-DSQLITE_ENABLE_FTS5 '
                             '-DSQLITE_ENABLE_FTS4 '
@@ -326,32 +324,32 @@ def library_recipes():
                   '--disable-dependency-tracking',
               ]
           ),
-        ])
-
-    if getDeptargetTuple() < (10, 5):
-        result.extend([
           dict(
               name="Bzip2 1.0.6",
-              url="http://bzip.org/1.0.6/bzip2-1.0.6.tar.gz",
+              url="https://sourceware.org/pub/bzip2/bzip2-1.0.6.tar.gz",
               checksum='00b516f4704d4a7cb50a1d97e6e8e15b',
               configure=None,
               install='make install CC=%s CXX=%s, PREFIX=%s/usr/local/ CFLAGS="-arch %s"'%(
                   CC, CXX,
                   shellQuote(os.path.join(WORKDIR, 'libraries')),
                   ' -arch '.join(ARCHLIST),
-              ),
+              )
           ),
           dict(
-              name="ZLib 1.2.3",
-              url="http://www.gzip.org/zlib/zlib-1.2.3.tar.gz",
-              checksum='debc62758716a169df9f62e6ab2bc634',
-              configure=None,
-              install='make install CC=%s CXX=%s, prefix=%s/usr/local/ CFLAGS="-arch %s"'%(
-                  CC, CXX,
-                  shellQuote(os.path.join(WORKDIR, 'libraries')),
-                  ' -arch '.join(ARCHLIST),
-              ),
-          ),
+              name="ZLib 1.2.11",
+              url="https://zlib.net/zlib-1.2.11.tar.gz",
+              checksum='1c9f62f0778697a09d36121ead88e08e',
+              suppressCFlags=True,
+              configure='./configure',
+              configure_full=[
+                  '--prefix=%s/usr/local/' % (os.path.join(WORKDIR, 'libraries'))
+              ],
+              install='make install'
+            ),
+    ])
+
+    if getDeptargetTuple() < (10, 5):
+        result.extend([
           dict(
               # Note that GNU readline is GPL'd software
               name="GNU Readline 6.1.2",
@@ -980,7 +978,10 @@ def buildRecipe(recipe, basedir, archList):
             #"CPP=gcc -arch %s -E"%(' -arch '.join(archList,),),
         ]

-        if 'configure_pre' in recipe:
+        if 'configure_full' in recipe:
+            configure_args = list(recipe['configure_full'])
+
+        elif 'configure_pre' in recipe:
             args = list(recipe['configure_pre'])
             if '--disable-static' in args:
                 configure_args.remove('--enable-static')
@@ -988,28 +989,29 @@ def buildRecipe(recipe, basedir, archList):
                 configure_args.remove('--disable-shared')
             configure_args.extend(args)

-        if recipe.get('useLDFlags', 1):
-            configure_args.extend([
-                "CFLAGS=%s-mmacosx-version-min=%s -arch %s "
-                            "-I%s/usr/local/include"%(
-                        recipe.get('extra_cflags', ''),
+        if not recipe.get('suppressCFlags', False):
+            if recipe.get('useLDFlags', 1):
+                configure_args.extend([
+                    "CFLAGS=%s-mmacosx-version-min=%s -arch %s "
+                                "-I%s/usr/local/include"%(
+                            recipe.get('extra_cflags', ''),
+                            DEPTARGET,
+                            ' -arch '.join(archList),
+                            shellQuote(basedir)[1:-1],),
+                    "LDFLAGS=-mmacosx-version-min=%s -L%s/usr/local/lib -arch %s"%(
                         DEPTARGET,
-                        ' -arch '.join(archList),
-                        shellQuote(basedir)[1:-1],),
-                "LDFLAGS=-mmacosx-version-min=%s -L%s/usr/local/lib -arch %s"%(
-                    DEPTARGET,
-                    shellQuote(basedir)[1:-1],
-                    ' -arch '.join(archList)),
-            ])
-        else:
-            configure_args.extend([
-                "CFLAGS=%s-mmacosx-version-min=%s -arch %s "
-                            "-I%s/usr/local/include"%(
-                        recipe.get('extra_cflags', ''),
-                        DEPTARGET,
-                        ' -arch '.join(archList),
-                        shellQuote(basedir)[1:-1],),
-            ])
+                        shellQuote(basedir)[1:-1],
+                        ' -arch '.join(archList)),
+                ])
+            else:
+                configure_args.extend([
+                    "CFLAGS=%s-mmacosx-version-min=%s -arch %s "
+                                "-I%s/usr/local/include"%(
+                            recipe.get('extra_cflags', ''),
+                            DEPTARGET,
+                            ' -arch '.join(archList),
+                            shellQuote(basedir)[1:-1],),
+                ])

         if 'configure_post' in recipe:
             configure_args = configure_args + list(recipe['configure_post'])
@@ -1522,6 +1524,11 @@ def buildInstaller():
     pkgroot = os.path.join(outdir, 'Python.mpkg', 'Contents')
     pkgcontents = os.path.join(pkgroot, 'Packages')
     os.makedirs(pkgcontents)
+
+    #o3de modification:  We don't need packages for our purposes, so we return immediately:
+    return
+
+
     for recipe in pkg_recipes():
         packageFromRecipe(pkgcontents, recipe)

