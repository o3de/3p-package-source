#
# Copyright (c) Contributors to the Open 3D Engine Project.
# For complete copyright and license terms please see the LICENSE at the root of this distribution.
# 
# SPDX-License-Identifier: Apache-2.0 OR MIT
#
#

set(MY_NAME "PhysX")
set(TARGET_WITH_NAMESPACE "3rdParty::$${MY_NAME}")
if (TARGET $${TARGET_WITH_NAMESPACE})
    return()
endif()

set(_PACKAGE_DIR $${CMAKE_CURRENT_LIST_DIR}/PhysX/$$<IF:$$<BOOL:$${LY_MONOLITHIC_GAME}>,physx,pxshared>/)

set($${MY_NAME}_INCLUDE_DIR
    $${_PACKAGE_DIR}/include
    $${_PACKAGE_DIR}/include/foundation
    $${_PACKAGE_DIR}/include/geometry
)

set($${MY_NAME}_COMPILE_DEFINITIONS $$<$$<BOOL:$${LY_MONOLITHIC_GAME}>:PX_PHYSX_STATIC_LIB>)

set(PATH_TO_STATIC_LIBS $${_PACKAGE_DIR}/$$<IF:$$<CONFIG:debug>,debug,$$<$$<CONFIG:profile>:profile>>/lib)
# Frameworks are added and managed by XCode during the build process.
# At the moment $$<CONFIG> does not get replaced for "debug", "profile" or
# "release" for frameworks when added to XCode, so it's not able to find
# the frameworks since their path is wrong. To workaround this, for now it
# will only use the release version of the library.
set(PATH_TO_SHARED_LIBS $${_PACKAGE_DIR}/bin)


set($${MY_NAME}_LIBRARIES
    $${PATH_TO_STATIC_LIBS}/libPhysXCharacterKinematic_static_64.a
    $${PATH_TO_STATIC_LIBS}/libPhysXVehicle_static_64.a
    $${PATH_TO_STATIC_LIBS}/libPhysXExtensions_static_64.a
    $${PATH_TO_STATIC_LIBS}/libPhysXPvdSDK_static_64.a
)
if(LY_MONOLITHIC_GAME)
    list(APPEND $${MY_NAME}_LIBRARIES
        $${PATH_TO_STATIC_LIBS}/libPhysX_static_64.a
        $${PATH_TO_STATIC_LIBS}/libPhysXCooking_static_64.a
        $${PATH_TO_STATIC_LIBS}/libPhysXFoundation_static_64.a
        $${PATH_TO_STATIC_LIBS}/libPhysXCommon_static_64.a
    )
else()
    list(APPEND $${MY_NAME}_LIBRARIES
        $${PATH_TO_SHARED_LIBS}/PhysX.framework
        $${PATH_TO_SHARED_LIBS}/PhysXCooking.framework
        $${PATH_TO_SHARED_LIBS}/PhysXFoundation.framework
        $${PATH_TO_SHARED_LIBS}/PhysXCommon.framework
    )
endif()

add_library($${TARGET_WITH_NAMESPACE} INTERFACE IMPORTED GLOBAL)
ly_target_include_system_directories(TARGET $${TARGET_WITH_NAMESPACE} INTERFACE $${$${MY_NAME}_INCLUDE_DIR})
target_link_libraries($${TARGET_WITH_NAMESPACE} INTERFACE $${$${MY_NAME}_LIBRARIES})
target_compile_definitions($${TARGET_WITH_NAMESPACE} INTERFACE $${$${MY_NAME}_COMPILE_DEFINITIONS})

# Frameworks do not need to get added as runtime dependencies
# since they are handled by XCode directly. Frameworks will
# be copied into the app when constructed by XCode.

set($${MY_NAME}_FOUND True)
